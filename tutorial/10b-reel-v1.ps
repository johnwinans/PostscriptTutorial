%!PS

%   Postscript Tutorial Notes
%
%    Copyright (C) 2019 John Winans
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <https://www.gnu.org/licenses/>.


% Print the numbers for a score reel

% A procedure to convert from mm to points
% stack: n  ->  n
/in { 72 mul } def

% A procedure to convert from mm to points
% stack: n  ->  n
/mm { 2.83465 mul } def

/PageMarginY .75 in def		% bottom page margin
/PageMarginX .25 in def		% left page margin
/PaddingX 10 def			% tweak the numbers into the center of the strip
/ReelWidth 51 mm def		% the outside width of the reel

/FacetHt 62 mm def			% height of the facets on the reel 

/NewCenturySchlbk-Bold findfont 75 mm scalefont setfont

% Create a numeric string for each digit and print it on the page
0 1 9 {
	dup				% i i				% save a copy for later
	9 exch sub		% i 9-i				% reverse order of the display from 0-9 to 9-0
	1 string cvs	% i (i)				% create the string we want to show
	exch			% (i) i				% bury the string for later
    dup             % (i) y x			% replicate the i to calc x and y positions
    4 div floor     % (i) y floor(x/4)	% initial x position is either 0, 1 or 2 
    ReelWidth mul   % (i) y x			% x = x * ReelWidth
    PageMarginX add % (i) y x += margin	% account for the page margin
	PaddingX add	% (i) y x += padding% fudge X position to center it on the strip 
    exch            % (i) x y			% done with x, prepare to calculate y
    4 mod           % (i) x (y%4)		% y position depends on the digit
    FacetHt mul		% (i) x (y*FacetHt)	% calc the digit's vertical position
    PageMarginY add % (i) x (y+PageMarginY)	% account for the page margin
    moveto			% (i)				% position to render the digit string
    show			% -					% print the digit on the page
} for


% add some hairline fiducials so we know where to cut the strips

% 1 pt is pretty thick
1 setlinewidth
0 .8 0 setrgbcolor	% print fiducials green

% fiducials
0 1 3 {
    newpath			% i
    ReelWidth mul	% i*ReelWidth	Calculate the X position
    PageMarginX add	% x				Adjust for the left page margin
    dup				% x x			Save a copy for the top hairline
    0 moveto		% x				Move to mark the bottom hairline
    0 25 rlineto	% x				Draw a line upward 25 points
    stroke			% x				Draw it on the page

    newpath			% x
    11 in moveto	% -				Move to top of an 11" page
    0 -25 rlineto	% -				Draw a line downward 25 points
    stroke			% -				Draw it on the page
} for

showpage
