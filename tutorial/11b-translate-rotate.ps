%!PS

%   Postscript Tutorial Notes
%
%    Copyright (C) 2019 John Winans
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <https://www.gnu.org/licenses/>.


% A procedure to convert from millimeters to points
% stack: n  ->  n
/mm { 2.83465 mul } def


% A variable defining the size of our square box 
/BoxDim 30 mm def


% Draw a box with lower left corner at 0,0
% DrawBox: (s) -> -
/DrawBox
{
	gsave					% (s) save graphics context
	newpath					% (s)
	0 0 moveto				% (s)
	BoxDim 0 rlineto		% (s)
	0 BoxDim rlineto		% (s)
	BoxDim neg 0 rlineto	% (s)
	closepath				% (s)

	gsave					% (s) save the path!
	fill				% fill the box with the current color
	grestore			% restore the path

	1 mm setlinewidth	% a thickish line width
	0 setgray			% change the current color to black
	stroke				% draw a black line around the box

	1 mm 1 mm moveto	% move to the lower left interior of the box 

	/NewCenturySchlbk-Bold findfont BoxDim .6 mul scalefont setfont
	%(Box) show
	show
	grestore			% restore the initial graphics context (color, position,...)
}
def

1 0 0 setrgbcolor		% red
(A) DrawBox				% draw a red box
BoxDim BoxDim translate	% translate coordinate system to upper right of the box  
(B) DrawBox				% draw another box at the new translated 0,0 location

100 mm BoxDim translate	% A translation of a translation of a...
(C) DrawBox				% draw another box at the new translated 0,0 location

0 1 0 setrgbcolor		% green
45 rotate				% rotate counter-clockwise around the current 0,0 point
(D) DrawBox				% draw another box at the same, but now rotated, location  

BoxDim BoxDim translate	% translate to upper right of the (rotated) box
1 0 0 setrgbcolor		% red
(E) DrawBox				% draw another box..

BoxDim BoxDim translate	% translate to upper right of the latest drawn box
20 rotate				% rotate another 20 degrees clockwise
.75 .75 scale			% shrink the size to 75%
(F) DrawBox				% draw another box


% Use a loop to repeatedly translate, rotate, scale and draw many more labeled boxes
1 1 20
{
	BoxDim BoxDim translate		% move to upper right of the last box
	20 rotate					% rotate 20 degrees clockwise
	.75 .75 scale				% shrink the size to 75%
	2 string cvs				% put the loop iterate on the stack as a string
	DrawBox						% draw a box with the loop count number in it
} for

showpage
